@model ProductsViewModel

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "Kitchen stock";

    int itemsPerPage = 100;
    int.TryParse(Configuration["ItemsPerPage"].ToString(), out itemsPerPage);
}

<h1>Kitchen Stock</h1>

<p>
    <div class="flexRowStart">
        <form asp-controller="Products" asp-action="Index" method="get">
            @Html.DisplayNameFor(model => model.Products.FirstOrDefault().Category)
            <select name="category" asp-items="Html.GetEnumSelectList<ProductCategory>()" class="form-control-sm">
                <option selected="selected" value="">Select a filter</option>
            </select>
            <input type="submit" value="Filter" class="btn btn-primary" />

        </form>
        @if ((await AuthorizationService.AuthorizeAsync(
              User, new Product(),
              UserOperations.Create)).Succeeded)
        {
            <a asp-action="Create" class="btn btn-primary endRow">Create New</a>
        }
    </div>
</p>
<div class="table-responsive">
    <table class="table table-striped table-dark">
        <thead>
            <tr class="table-primary">
                <th>
                    @Html.DisplayNameFor(model => model.Products.FirstOrDefault().Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Products.FirstOrDefault().Category)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Products.FirstOrDefault().Description)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Products)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @if ((await AuthorizationService.AuthorizeAsync(
                           User, item,
                           UserOperations.Update)).Succeeded)
                        {
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-primary">Edit</a>
                        }
                        @if ((await AuthorizationService.AuthorizeAsync(
                        User, item,
                        UserOperations.Read)).Succeeded)
                        {
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-primary">Details</a>
                        }
                        @if ((await AuthorizationService.AuthorizeAsync(
                          User, item,
                          UserOperations.Delete)).Succeeded)
                        {
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-primary">Delete</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@await Component.InvokeAsync("Pagination", new { numberOfItems = Model.TotalItems, itemsPerPage = itemsPerPage, currentPage = Model.PageIndex, controller = "Products", action = "Index", category = Model.CategoryFilter })
