@model ProductsViewModel


@{
    ViewData["Title"] = "Kitchen stock";

    
    var symboleNameSort = "";
    var symboleCategorySort ="";
    switch (Model.CurrentSort)
    {
        case "name_desc":
            symboleNameSort = "fa-sort-down";
            break;
        case "category_desc":
            symboleCategorySort = "fa-sort-down";
            break;
        case "category":
            symboleCategorySort = "fa-sort-up";
            break;
        default:
            symboleNameSort = "fa-sort-up";
            break;

    }
}

<div class="clearfix my-2">
    <form class="form-inline float-left" asp-controller="Products" asp-action="Index" method="get">
        <input type="hidden" name="sortOrder" value="@Model.CurrentSort" />
        <select name="searchOrFilter" asp-items="Html.GetEnumSelectList<ProductCategory>().OrderBy(c => c.Text)" class="form-control-sm mr-1" >
            <option selected="selected" value="">Select a filter</option>
        </select>
        <input type="submit" value="Filter" class="btn btn-secondary" />

    </form>
    @if ((await AuthorizationService.AuthorizeAsync(
            User, new Product(),
            UserOperations.Create)).Succeeded)
    {
        <a asp-action="Create" class="btn btn-primary float-right">Create New</a>
    }
    </div>
<div class="table-responsive">
    <table class="table table-striped table-dark">
        <thead>
            <tr class="table-primary">
                <th>
                    <a asp-controller="Products" asp-action="Index" asp-route-searchOrFilter="@Model.CategoryFilter?.ToString()" asp-route-sortOrder="@Model.NameSort">
                        @Html.DisplayNameFor(model => model.Products.FirstOrDefault().Name) <i class="fas @symboleNameSort"></i>
                    </a>
                </th>
                <th>
                    <a asp-controller="Products" asp-action="Index" asp-route-searchOrFilter="@Model.CategoryFilter?.ToString()" asp-route-sortOrder="@Model.CategorySort">
                        @Html.DisplayNameFor(model => model.Products.FirstOrDefault().Category) <i class="fas @symboleCategorySort"></i>
                    </a>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Products.FirstOrDefault().Description)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Products)
        {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @if ((await AuthorizationService.AuthorizeAsync(
                           User, item,
                           UserOperations.Update)).Succeeded)
                        {
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-primary">Edit</a>
                        }
                        @if ((await AuthorizationService.AuthorizeAsync(
                        User, item,
                        UserOperations.Read)).Succeeded)
                        {
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-primary">Details</a>
                        }
                        @if ((await AuthorizationService.AuthorizeAsync(
                          User, item,
                          UserOperations.Delete)).Succeeded)
                        {
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-primary">Delete</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@await Component.InvokeAsync("Pagination", new { numberOfItems = Model.TotalItems, itemsPerPage = @Model.ItemsPerPage, currentPage = Model.PageIndex, controller = "Products", action = "Index", searchOrFilter = Model.CategoryFilter?.ToString(), sortOrder = Model.CurrentSort })
